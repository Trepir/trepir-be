
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  firstName String
  lastName String
  displayName String
  email String @unique
  uid String @unique
  photoUrl String
  emailVerified Boolean
  trips Trip[]
  favoriteActivities FavoriteActivity[]
  activities Activity[]
  @@map("users")


}

model Trip {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  userId String 
  startDate DateTime
  endDate DateTime
  name String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  favouriteActivities FavoriteActivity[]
  tripByDays TripByDays[]
  @@map("trips")
}

model TripByDays {

id String @id @default(cuid())
index Int
tripId String
trip Trip @relation(fields: [tripId], references: [id], onDelete: Cascade)
orderedDay OrderedDay[]

}

model OrderedDay {

id String @id @default(uuid())
tripByDayId String
day TripByDays @relation(fields: [tripByDayId], references: [id], onDelete: Cascade)
index Int
  dayActivities DayActivity[]
  acomodations Acomodation[]
  travelEvents TravelEvent[]
}



model DayActivity {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  activityId String
  time DateTime?
  tripByOrderedDayId String
  tripByOrderedDay OrderedDay @relation(fields:[tripByOrderedDayId], references: [id], onDelete: Cascade)
  activity Activity @relation(fields:[activityId], references: [id], onDelete: Cascade)

	
}

model FavoriteActivity {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  activityId String
  userId String
  tripId String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  activity Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  trip Trip? @relation(fields:[tripId], references: [id], onDelete: Cascade)
  @@map("favorites")

}

model Acomodation {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  locationId String @unique
  startDate DateTime
  endDate DateTime
  tripByOrderedDayId String
  tripByOrderedDay OrderedDay @relation(fields:[tripByOrderedDayId], references: [id], onDelete: Cascade)
  location Location @relation(fields:[locationId], references: [id], onDelete: Cascade)
  @@map("acomodations")
}
model Location {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  latitude Float
  longitude Float
  country String
  state String
  locationName String
  city String
  googleId String? @unique
  activity Activity[]
  acomodation Acomodation?
  @@map("locations")
}

model TravelEvent {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  type TravelType
  departure DateTime
  arrival DateTime
  origin String
  destination String
  tripByOrderedDayId String
  tripByOrderedDay OrderedDay @relation(fields:[tripByOrderedDayId], references: [id], onDelete: Cascade)
  @@map("travel")
}

model Activity {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  name String
  duration Float
  description String
  time DateTime?
  rating Int?
  locationId String
  location Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
  tags Tag[]
  creatorId String
  creator User @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  favoriteActivities FavoriteActivity[]
  dayActivities DayActivity[]

  @@map("activities")
}



enum Tag {
  Relax
  Landmark
  Entertainment
  Drinks
  Restaurant
  Adventure  
  Museum
  Outdoors
  Tour
  Beach
  Culture
  Nightlife
  Nature
  Festivity
  Sport
  @@map("tags")
}

enum TravelType {
  Flight
  Bus
  Boat
  Car
  Train
}
